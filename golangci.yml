# -----> Linter <-----

# Name:             golangci-lint
# Documentation:    https://golangci-lint.run/
# Internal linters: https://golangci-lint.run/usage/linters/

# -----> Settings <-----

# Run settings
run:
  go: 1.23.2
  color: always
  deadline: 5m

issues:
  exclude-dirs:
    - test/*
    - vendor/*

# Output settings
output:
  formats: colored-line-number
  sort-results: true

# Linter list
linters:
  fast: false      # Run all linters every time
  enable-all: true # Enable all linters
  enable:
  disable:         # Disable linters
    # Deprecated
    # - exhaustivestruct # Deprecated (The owner seems to have abandoned the linter. Replaced by exhaustruct)
    # - structcheck      # Deprecated (The owner seems to have abandoned the linter. Replaced by unused)
    # - nosnakecase      # Deprecated (The repository of the linter has been deprecated by the owner. Replaced by revive(var-naming))
    # - interfacer       # Deprecated (The repository of the linter has been archived by the owner)
    # - scopelint        # Deprecated (The repository of the linter has been deprecated by the owner. Replaced by exportloopref)
    # - maligned         # Deprecated (The repository of the linter has been archived by the owner. Replaced by govet 'fieldalignment')
    # - deadcode         # Deprecated (The owner seems to have abandoned the linter. Replaced by unused)
    # - varcheck         # Deprecated (The owner seems to have abandoned the linter. Replaced by unused)
    # - ifshort          # Deprecated (The repository of the linter has been deprecated by the owner)
    # - golint           # Deprecated (The repository of the linter has been archived by the owner. Replaced by revive)
    # - execinquery      # Deprecated (The repository of the linter has been archived by the owner)
    # - gomnd            # Deprecated (The linter has been renamed. Replaced by mnd)
    - exportloopref      # Deprecated (This linter is no longer relevant. Replaced by copyloopvar)
    # Not used
    - gochecknoinits # Use init for efficiency      (Checks that no init functions are present in Go code)
    - nolintlint     # Permanent leading space rule (Reports ill-formed or insufficient nolint directives)
    - nilnil         # Not agree                    (Checks that there is no simultaneous return of nil error and an invalid value)
    - perfsprint     # Not agree                    (Checks that fmt.Sprintf can be replaced with a faster alternative.)
# Linter settings
linters-settings:
  # Checks function and package cyclomatic complexity
  cyclop: # Since v1.37.0
    # The maximal code complexity to report.
    max-complexity: 20
    # The maximal average package complexity.
    #package-average: 0.0
    # Should ignore tests.
    skip-tests: true
  # Go linter that checks if package imports are in a list of acceptable packages
  depguard: # Since v1.4.0
    rules:
      # Name of a rule.
      main:
        # List of file globs that will match this list of settings to compare against.
        # Default: $all
        #files:
        # List of allowed packages.
        #allow:
        # Packages that are not allowed where the value is a suggestion.
        deny:
          - pkg: "golang.org/x/xerrors"
            desc: We don't do that here
  # Errcheck is a program for checking for unchecked errors in go programs
  errcheck: # Since v1.0.0
    exclude-functions:
      - (*github.com/gin-gonic/gin.Context).Error           # Returns not a runtime error, but a wrapped error
      - (*github.com/gin-gonic/gin.Context).ShouldBindQuery # Ignore the parsing error, validate the model ourselves
      - (*github.com/gin-gonic/gin.Context).ShouldBindWith  # Ignore the parsing error, validate the model ourselves
  # Check exhaustiveness of enum switch statements
  exhaustive: # Since v1.28.0
    default-signifies-exhaustive: true # Presence of "default" case in switch statements satisfies exhaustiveness
  # Checks if all structure fields are initialized
  exhaustruct: # Since v1.46.0
    include:
      - 'shortener/.*' # Include all files in the shortener package
  # Tool for detection of long functions
  funlen: # Since 1.18.0
    # Checks the number of lines in a function.
    lines: 100
    # Checks the number of statements in a function.
    statements: 100
    # Ignore comments when counting lines.
    # Default false
    ignore-comments: true
  # Gci control golang package import order and make it always deterministic
  gci: # Since v1.30.0
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(shortener) # Custom section: groups all imports with the specified Prefix.
      - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
      - alias # Alias section: contains all alias imports. This section is not present unless explicitly enabled.
      - localmodule # Local module section: contains all local packages. This section is not present unless explicitly enabled.
    custom-order: true
  #Computes and checks the cognitive complexity of functions
  gocognit: # Since v1.20.0
    # Minimal code complexity to report.
    min-complexity: 50
  # Computes and checks the cyclomatic complexity of functions
  gocyclo: # Since v1.0.0
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 50
  # Check if comments end in a period
  godot: # Since v1.25.0
    capital: true # Comments must start with a capital letter
    exclude:
    - "@" # Swaggo comment params
  # Tool for detection of FIXME, TODO and other comment keywords
  godox: # Since v1.19.0
    keywords: # Comment suspicious words
      - HACK
      - BUG
  # Run exhaustiveness checks on Go "sum types".
  gochecksumtype: # Since v1.55.0
    # Presence of `default` case in switch statements satisfies exhaustiveness, if all members are not listed.
    default-signifies-exhaustive: true
  # Checks whether code was gofumpt-ed
  gofumpt: # Since v1.28.0
    extra-rules: true
  # Inspects source code for security problems
  gosec: # Since v1.0.0
    config:
      G101: # False positives (Look for hard coded credentials)
        entropy_threshold: "200.0"
  # Reports interfaces with unnamed method parameters.
  inamedparam: # Since v1.55.0
    # Skips check for interface methods with only a single parameter.
    skip-single-param: false
  # A linter that checks the number of methods inside an interface
  interfacebloat: # Since v1.49.0
    max: 50 # Allow a large number of methods  
  # Reports long lines  
  lll: # Since v1.8.0
    line-length: 190 # Maximum of code line length
  # Maintidx measures the maintainability index of each function
  maintidx: # Since v1.44.0
    # Show functions with maintainability index lower than N.
    under: 20
  # Reports deeply nested if statements
  nestif: # Since v1.25.0
    # Minimal complexity of if statements to report.
    min-complexity: 10
  # Check that struct tags are well aligned
  tagalign: # Since v1.53.0
    align: true
    sort: true
    order:
      - yml
      - yaml
      - form
      - json
      - mapstructure
      - valid
      - valid_add
      - valid_edit
      - valid_del
      - valid_label
    strict: true
  # Checks the struct tags
  tagliatelle: # Since v1.40.0
    case:
      rules:
        json: snake
  # Checks that the length of a variable's name matches its scope
  varnamelen: # Since v1.43.0
    min-name-length: 1 # Minimum of var name
  # Checks that errors returned from external packages are wrapped
  wrapcheck: # Since v1.32.0
    ignorePackageGlobs:
    - shortener/*
  # Forces you to use empty lines
  wsl: # Since v1.20.0
    # Do strict checking when assigning from append (x = append(x, y)). If
    # this is set to true - the append call must append either a variable
    # assigned, called or used on the line above.
    strict-append: true
    # Allows assignments to be cuddled with variables used in calls on
    # line above and calls to be cuddled with assignments of variables
    # used in call on line above.
    allow-assign-and-call: true
    # Allows assignments to be cuddled with anything.
    allow-assign-and-anything: false
    # Allows cuddling to assignments even if they span over multiple lines.
    allow-multiline-assign: true
    # If the number of lines in a case block is equal to or lager than this
    # number, the case *must* end white a newline.
    force-case-trailing-whitespace: 0
    # Allow blocks to end with comments.
    allow-trailing-comment: false
    # Allow multiple comments in the beginning of a block separated with newline.
    allow-separated-leading-comment: false
    # Allow multiple var/declaration statements to be cuddled.
    allow-cuddle-declarations: true
    # A list of call idents that everything can be cuddled with.
    # Defaults to calls looking like locks.
    allow-cuddle-with-calls: ["Lock", "RLock"]
    # AllowCuddleWithRHS is a list of right hand side variables that is allowed
    # to be cuddled with anything. Defaults to assignments or calls looking
    # like unlocks.
    allow-cuddle-with-rhs: ["Unlock", "RUnlock", "Transaction"]
    # Causes an error when an If statement that checks an error variable doesn't
    # cuddle with the assignment of that variable.
    force-err-cuddling: true
    # When force-err-cuddling is enabled this is a list of names
    # used for error variables to check for in the conditional.
    error-variable-names: ["err"]
    # Causes an error if a short declaration (:=) cuddles with anything other than
    # another short declaration.
    # This logic overrides force-err-cuddling among others.
    force-short-decl-cuddling: false